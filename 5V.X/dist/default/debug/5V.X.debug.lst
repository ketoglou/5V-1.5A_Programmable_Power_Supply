

Microchip MPLAB XC8 Assembler V2.05 build -831301201 
                                                                                               Wed Mar 06 21:09:49 2019

Microchip MPLAB XC8 C Compiler v2.05 (Free license) build 20181220022703 Og1 
     1                           	processor	18F25K50
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	flic
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	text0,global,reloc=2,class=CODE,delta=1
    10                           	psect	text1,global,reloc=2,class=CODE,delta=1
    11                           	psect	text2,global,reloc=2,class=CODE,delta=1
    12                           	psect	text3,global,reloc=2,class=CODE,delta=1
    13                           	psect	text4,global,reloc=2,class=CODE,delta=1
    14                           	psect	text5,global,reloc=2,class=CODE,delta=1
    15                           	psect	text6,global,reloc=2,class=CODE,delta=1
    16                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    17                           	psect	text8,global,reloc=2,class=CODE,delta=1
    18                           	psect	text9,global,reloc=2,class=CODE,delta=1
    19                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    20                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    21                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    22  0000                     
    23                           ; Version 2.05
    24                           ; Generated 20/12/2018 GMT
    25                           ; 
    26                           ; Copyright Â© 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
    27                           ; All rights reserved.
    28                           ; 
    29                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    30                           ; 
    31                           ; Redistribution and use in source and binary forms, with or without modification, are
    32                           ; permitted provided that the following conditions are met:
    33                           ; 
    34                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    35                           ;        conditions and the following disclaimer.
    36                           ; 
    37                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    38                           ;        of conditions and the following disclaimer in the documentation and/or other
    39                           ;        materials provided with the distribution.
    40                           ; 
    41                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    42                           ;        software without specific prior written permission.
    43                           ; 
    44                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    45                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    46                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    47                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    48                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    49                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    50                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    51                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    52                           ; 
    53                           ; 
    54                           ; Code-generator required, PIC18F25K50 Definitions
    55                           ; 
    56                           ; SFR Addresses
    57  0000                     _ANSELCbits	set	3933
    58  0000                     _ANSELA	set	3931
    59  0000                     _SPBRG1	set	4015
    60  0000                     _BAUDCON1	set	4024
    61  0000                     _IPR1bits	set	3999
    62  0000                     _RCSTA1	set	4011
    63  0000                     _TXSTA1	set	4012
    64  0000                     _PMD0bits	set	3966
    65  0000                     _TRISCbits	set	3988
    66  0000                     _LATA	set	3977
    67  0000                     _TRISA	set	3986
    68  0000                     _INTCONbits	set	4082
    69  0000                     _RCONbits	set	4048
    70  0000                     _OSCCON2bits	set	4050
    71  0000                     _OSCCONbits	set	4051
    72  0000                     _OSCTUNE	set	3995
    73  0000                     _OSCCON2	set	4050
    74  0000                     _OSCCON	set	4051
    75  0000                     _RCREG1	set	4014
    76  0000                     _RCSTA1bits	set	4011
    77  0000                     _TXREG1	set	4013
    78  0000                     _TXSTA1bits	set	4012
    79  0000                     _PIR1bits	set	3998
    80  0000                     _PIE1bits	set	3997
    81                           
    82                           	psect	smallconst
    83  000800                     __psmallconst:
    84                           	opt callstack 0
    85  000800  00                 	db	0
    86  000801                     STR_3:
    87  000801  76                 	db	118	;'v'
    88  000802  6F                 	db	111	;'o'
    89  000803  75                 	db	117	;'u'
    90  000804  6C                 	db	108	;'l'
    91  000805  61                 	db	97	;'a'
    92  000806  6B                 	db	107	;'k'
    93  000807  69                 	db	105	;'i'
    94  000808  0A                 	db	10
    95  000809  00                 	db	0
    96  00080A                     STR_2:
    97  00080A  6B                 	db	107	;'k'
    98  00080B  00                 	db	0
    99  00080C                     STR_1:
   100  00080C  6F                 	db	111	;'o'
   101  00080D  00                 	db	0
   102                           
   103                           ; #config settings
   104  00080E  00                 	db	0	; dummy byte at the end
   105  0000                     
   106                           	psect	cinit
   107  000B20                     __pcinit:
   108                           	opt callstack 0
   109  000B20                     start_initialization:
   110                           	opt callstack 0
   111  000B20                     __initialization:
   112                           	opt callstack 0
   113                           
   114                           ; Clear objects allocated to COMRAM (35 bytes)
   115  000B20  EE00  F001         	lfsr	0,__pbssCOMRAM
   116  000B24  0E23               	movlw	35
   117  000B26                     clear_0:
   118  000B26  6AEE               	clrf	postinc0,c
   119  000B28  06E8               	decf	wreg,f,c
   120  000B2A  E1FD               	bnz	clear_0
   121  000B2C                     end_of_initialization:
   122                           	opt callstack 0
   123  000B2C                     __end_of__initialization:
   124                           	opt callstack 0
   125  000B2C  9041               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   126  000B2E  9241               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   127  000B30  0E00               	movlw	low (__Lmediumconst shr (0+16))
   128  000B32  6EF8               	movwf	tblptru,c
   129  000B34  0100               	movlb	0
   130  000B36  EF08  F004         	goto	_main	;jump to C main() function
   131                           
   132                           	psect	bssCOMRAM
   133  000001                     __pbssCOMRAM:
   134                           	opt callstack 0
   135  000001                     _rx_buffer:
   136                           	opt callstack 0
   137  000001                     	ds	32
   138  000021                     _rx_counter:
   139                           	opt callstack 0
   140  000021                     	ds	2
   141  000023                     _tx_byte:
   142                           	opt callstack 0
   143  000023                     	ds	1
   144                           
   145                           	psect	cstackCOMRAM
   146  000024                     __pcstackCOMRAM:
   147                           	opt callstack 0
   148  000024                     ??i2_Initialize_Baud_Rate:
   149  000024                     
   150                           ; 2 bytes @ 0x0
   151  000024                     	ds	2
   152  000026                     i2Initialize_Baud_Rate@baud_rate:
   153                           	opt callstack 0
   154                           
   155                           ; 1 bytes @ 0x2
   156  000026                     	ds	1
   157  000027                     i2USART_Init@baud_rate:
   158                           	opt callstack 0
   159                           
   160                           ; 2 bytes @ 0x3
   161  000027                     	ds	2
   162  000029                     ??_high_isr:
   163  000029                     
   164                           ; 1 bytes @ 0x5
   165  000029                     	ds	2
   166  00002B                     ??_Initialize_Baud_Rate:
   167  00002B                     ??_USART_ReceiveByte:
   168  00002B                     ?_USART_SendByte:
   169                           	opt callstack 0
   170                           
   171                           ; 2 bytes @ 0x7
   172  00002B                     	ds	1
   173  00002C                     USART_ReceiveByte@temp_char:
   174                           	opt callstack 0
   175                           
   176                           ; 1 bytes @ 0x8
   177  00002C                     	ds	1
   178  00002D                     Initialize_Baud_Rate@baud_rate:
   179                           	opt callstack 0
   180  00002D                     USART_SendByte@byte:
   181                           	opt callstack 0
   182  00002D                     USART_ReceiveByte@i:
   183                           	opt callstack 0
   184                           
   185                           ; 2 bytes @ 0x9
   186  00002D                     	ds	1
   187  00002E                     USART_Init@baud_rate:
   188                           	opt callstack 0
   189  00002E                     USART_SendString@str:
   190                           	opt callstack 0
   191                           
   192                           ; 2 bytes @ 0xA
   193  00002E                     	ds	1
   194  00002F                     ?_USART_ReceiveString:
   195                           	opt callstack 0
   196  00002F                     USART_ReceiveString@buffer:
   197                           	opt callstack 0
   198                           
   199                           ; 2 bytes @ 0xB
   200  00002F                     	ds	1
   201  000030                     USART_SendString@size:
   202                           	opt callstack 0
   203                           
   204                           ; 2 bytes @ 0xC
   205  000030                     	ds	1
   206  000031                     USART_ReceiveString@size:
   207                           	opt callstack 0
   208                           
   209                           ; 2 bytes @ 0xD
   210  000031                     	ds	1
   211  000032                     ??_USART_SendString:
   212                           
   213                           ; 1 bytes @ 0xE
   214  000032                     	ds	1
   215  000033                     ??_USART_ReceiveString:
   216                           
   217                           ; 1 bytes @ 0xF
   218  000033                     	ds	1
   219  000034                     USART_SendString@i:
   220                           	opt callstack 0
   221  000034                     USART_ReceiveString@i:
   222                           	opt callstack 0
   223                           
   224                           ; 2 bytes @ 0x10
   225  000034                     	ds	2
   226  000036                     USART_SendString@attempts:
   227                           	opt callstack 0
   228                           
   229                           ; 2 bytes @ 0x12
   230  000036                     	ds	2
   231  000038                     ??_main:
   232                           
   233                           ; 1 bytes @ 0x14
   234  000038                     	ds	2
   235  00003A                     main@okrec:
   236                           	opt callstack 0
   237                           
   238                           ; 7 bytes @ 0x16
   239  00003A                     	ds	7
   240                           
   241 ;;
   242 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   243 ;;
   244 ;; *************** function _main *****************
   245 ;; Defined at:
   246 ;;		line 41 in file "main.c"
   247 ;; Parameters:    Size  Location     Type
   248 ;;		None
   249 ;; Auto vars:     Size  Location     Type
   250 ;;  okrec           7   22[COMRAM] unsigned char [7]
   251 ;; Return value:  Size  Location     Type
   252 ;;                  1    wreg      void 
   253 ;; Registers used:
   254 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   255 ;; Tracked objects:
   256 ;;		On entry : 0/0
   257 ;;		On exit  : 0/0
   258 ;;		Unchanged: 0/0
   259 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   260 ;;      Params:         0       0       0       0       0       0       0       0       0
   261 ;;      Locals:         7       0       0       0       0       0       0       0       0
   262 ;;      Temps:          2       0       0       0       0       0       0       0       0
   263 ;;      Totals:         9       0       0       0       0       0       0       0       0
   264 ;;Total ram usage:        9 bytes
   265 ;; Hardware stack levels required when called:    5
   266 ;; This function calls:
   267 ;;		_USART_Init
   268 ;;		_USART_ReceiveString
   269 ;;		_USART_SendString
   270 ;; This function is called by:
   271 ;;		Startup code after reset
   272 ;; This function uses a non-reentrant model
   273 ;;
   274                           
   275                           	psect	text0
   276  000810                     __ptext0:
   277                           	opt callstack 0
   278  000810                     _main:
   279                           	opt callstack 26
   280                           
   281                           ;main.c: 42:     OSCCON = 0x70;
   282                           
   283                           ;incstack = 0
   284  000810  0E70               	movlw	112
   285  000812  6ED3               	movwf	4051,c	;volatile
   286                           
   287                           ;main.c: 43:     OSCCON2 = 0x94;
   288  000814  0E94               	movlw	148
   289  000816  6ED2               	movwf	4050,c	;volatile
   290                           
   291                           ;main.c: 44:     OSCTUNE = 0x80;
   292  000818  0E80               	movlw	128
   293  00081A  6E9B               	movwf	3995,c	;volatile
   294  00081C                     l62:
   295  00081C  A4D3               	btfss	4051,2,c	;volatile
   296  00081E  B2D2               	btfsc	4050,1,c	;volatile
   297  000820  D002               	goto	u450
   298  000822  AED2               	btfss	4050,7,c	;volatile
   299  000824  D7FB               	goto	l62
   300  000826                     u450:
   301                           
   302                           ;main.c: 47:     USART_Init(3);
   303  000826  0E00               	movlw	0
   304  000828  6E2F               	movwf	USART_Init@baud_rate+1,c
   305  00082A  0E03               	movlw	3
   306  00082C  6E2E               	movwf	USART_Init@baud_rate,c
   307  00082E  EC54  F005         	call	_USART_Init	;wreg free
   308                           
   309                           ;main.c: 50:     RCONbits.IPEN = 1;
   310  000832  8ED0               	bsf	4048,7,c	;volatile
   311                           
   312                           ;main.c: 51:     INTCONbits.GIE = 1;
   313  000834  8EF2               	bsf	4082,7,c	;volatile
   314                           
   315                           ;main.c: 52:     INTCONbits.PEIE = 1;
   316  000836  8CF2               	bsf	4082,6,c	;volatile
   317                           
   318                           ;main.c: 54:     TRISA = 0x00;
   319  000838  0E00               	movlw	0
   320  00083A  6E92               	movwf	3986,c	;volatile
   321                           
   322                           ;main.c: 55:     ANSELA = 0;
   323  00083C  0E00               	movlw	0
   324  00083E  010F               	movlb	15	; () banked
   325  000840  6F5B               	movwf	91,b	;volatile
   326  000842                     l1214:
   327                           
   328                           ;main.c: 60:         LATA = 0x01;
   329  000842  0E01               	movlw	1
   330  000844  6E89               	movwf	3977,c	;volatile
   331                           
   332                           ;main.c: 61:         _delay((unsigned long)((1000)*(48000000/4000.0)));
   333  000846  0E3D               	movlw	61
   334  000848  6E39               	movwf	(??_main+1)& (0+255),c
   335  00084A  0EE1               	movlw	225
   336  00084C  6E38               	movwf	??_main& (0+255),c
   337  00084E  0E40               	movlw	64
   338  000850                     u497:
   339  000850  2EE8               	decfsz	wreg,f,c
   340  000852  D7FE               	bra	u497
   341  000854  2E38               	decfsz	??_main& (0+255),f,c
   342  000856  D7FC               	bra	u497
   343  000858  2E39               	decfsz	(??_main+1)& (0+255),f,c
   344  00085A  D7FA               	bra	u497
   345                           
   346                           ;main.c: 62:         LATA = 0x00;
   347  00085C  0E00               	movlw	0
   348  00085E  6E89               	movwf	3977,c	;volatile
   349                           
   350                           ;main.c: 63:         _delay((unsigned long)((1000)*(48000000/4000.0)));
   351  000860  0E3D               	movlw	61
   352  000862  6E39               	movwf	(??_main+1)& (0+255),c
   353  000864  0EE1               	movlw	225
   354  000866  6E38               	movwf	??_main& (0+255),c
   355  000868  0E40               	movlw	64
   356  00086A                     u507:
   357  00086A  2EE8               	decfsz	wreg,f,c
   358  00086C  D7FE               	bra	u507
   359  00086E  2E38               	decfsz	??_main& (0+255),f,c
   360  000870  D7FC               	bra	u507
   361  000872  2E39               	decfsz	(??_main+1)& (0+255),f,c
   362  000874  D7FA               	bra	u507
   363  000876                     l1222:
   364  000876  0E3A               	movlw	low main@okrec
   365  000878  6E2F               	movwf	USART_ReceiveString@buffer,c
   366  00087A  0E00               	movlw	high main@okrec
   367  00087C  6E30               	movwf	USART_ReceiveString@buffer+1,c
   368  00087E  0E00               	movlw	0
   369  000880  6E32               	movwf	USART_ReceiveString@size+1,c
   370  000882  0E02               	movlw	2
   371  000884  6E31               	movwf	USART_ReceiveString@size,c
   372  000886  ECE8  F004         	call	_USART_ReceiveString	;wreg free
   373  00088A  282F               	incf	?_USART_ReceiveString,w,c
   374  00088C  E103               	bnz	u460
   375  00088E  2830               	incf	?_USART_ReceiveString+1,w,c
   376  000890  B4D8               	btfsc	status,2,c
   377  000892  D7F1               	goto	l1222
   378  000894                     u460:
   379                           
   380                           ;main.c: 65:         if (okrec[0] == "o" && okrec[1] == "k")
   381  000894  503A               	movf	main@okrec,w,c
   382  000896  6E38               	movwf	??_main& (0+255),c
   383  000898  6A39               	clrf	(??_main+1)& (0+255),c
   384  00089A  0E0C               	movlw	low STR_1
   385  00089C  1838               	xorwf	??_main,w,c
   386  00089E  E1D1               	bnz	l1214
   387  0008A0  0E08               	movlw	high STR_1
   388  0008A2  1839               	xorwf	??_main+1,w,c
   389  0008A4  A4D8               	btfss	status,2,c
   390  0008A6  D7CD               	goto	l1214
   391  0008A8  503B               	movf	main@okrec+1,w,c
   392  0008AA  6E38               	movwf	??_main& (0+255),c
   393  0008AC  6A39               	clrf	(??_main+1)& (0+255),c
   394  0008AE  0E0A               	movlw	low STR_2
   395  0008B0  1838               	xorwf	??_main,w,c
   396  0008B2  E1C7               	bnz	l1214
   397  0008B4  0E08               	movlw	high STR_2
   398  0008B6  1839               	xorwf	??_main+1,w,c
   399  0008B8  A4D8               	btfss	status,2,c
   400  0008BA  D7C3               	goto	l1214
   401                           
   402                           ;main.c: 66:             USART_SendString("voulaki\n",8);
   403  0008BC  0E01               	movlw	low STR_3
   404  0008BE  6E2E               	movwf	USART_SendString@str,c
   405  0008C0  0E08               	movlw	high STR_3
   406  0008C2  6E2F               	movwf	USART_SendString@str+1,c
   407  0008C4  0E00               	movlw	0
   408  0008C6  6E31               	movwf	USART_SendString@size+1,c
   409  0008C8  0E08               	movlw	8
   410  0008CA  6E30               	movwf	USART_SendString@size,c
   411  0008CC  EC69  F004         	call	_USART_SendString	;wreg free
   412  0008D0  D7B8               	goto	l1214
   413  0008D2                     __end_of_main:
   414                           	opt callstack 0
   415                           
   416 ;; *************** function _USART_SendString *****************
   417 ;; Defined at:
   418 ;;		line 56 in file "USART.c"
   419 ;; Parameters:    Size  Location     Type
   420 ;;  str             2   10[COMRAM] PTR unsigned char 
   421 ;;		 -> STR_3(9), 
   422 ;;  size            2   12[COMRAM] int 
   423 ;; Auto vars:     Size  Location     Type
   424 ;;  attempts        2   18[COMRAM] int 
   425 ;;  i               2   16[COMRAM] int 
   426 ;; Return value:  Size  Location     Type
   427 ;;                  2   10[COMRAM] int 
   428 ;; Registers used:
   429 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   430 ;; Tracked objects:
   431 ;;		On entry : 0/0
   432 ;;		On exit  : 0/0
   433 ;;		Unchanged: 0/0
   434 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   435 ;;      Params:         4       0       0       0       0       0       0       0       0
   436 ;;      Locals:         4       0       0       0       0       0       0       0       0
   437 ;;      Temps:          2       0       0       0       0       0       0       0       0
   438 ;;      Totals:        10       0       0       0       0       0       0       0       0
   439 ;;Total ram usage:       10 bytes
   440 ;; Hardware stack levels used:    1
   441 ;; Hardware stack levels required when called:    4
   442 ;; This function calls:
   443 ;;		_USART_SendByte
   444 ;; This function is called by:
   445 ;;		_main
   446 ;; This function uses a non-reentrant model
   447 ;;
   448                           
   449                           	psect	text1
   450  0008D2                     __ptext1:
   451                           	opt callstack 0
   452  0008D2                     _USART_SendString:
   453                           	opt callstack 26
   454                           
   455                           ;USART.c: 57:     int attempts =3000,i;
   456                           
   457                           ;incstack = 0
   458  0008D2  0E0B               	movlw	11
   459  0008D4  6E37               	movwf	USART_SendString@attempts+1,c
   460  0008D6  0EB8               	movlw	184
   461  0008D8  6E36               	movwf	USART_SendString@attempts,c
   462  0008DA                     l1132:
   463  0008DA  0E0D               	movlw	13
   464  0008DC  EC80  F005         	call	_USART_SendByte
   465  0008E0  502B               	movf	?_USART_SendByte,w,c
   466  0008E2  102C               	iorwf	?_USART_SendByte+1,w,c
   467  0008E4  A4D8               	btfss	status,2,c
   468  0008E6  D008               	goto	u300
   469  0008E8  0636               	decf	USART_SendString@attempts,f,c
   470  0008EA  A0D8               	btfss	status,0,c
   471  0008EC  0637               	decf	USART_SendString@attempts+1,f,c
   472  0008EE  2836               	incf	USART_SendString@attempts,w,c
   473  0008F0  E1F4               	bnz	l1132
   474  0008F2  2837               	incf	USART_SendString@attempts+1,w,c
   475  0008F4  A4D8               	btfss	status,2,c
   476  0008F6  D7F1               	goto	l1132
   477  0008F8                     u300:
   478  0008F8                     l1136:
   479  0008F8  0E0A               	movlw	10
   480  0008FA  EC80  F005         	call	_USART_SendByte
   481  0008FE  502B               	movf	?_USART_SendByte,w,c
   482  000900  102C               	iorwf	?_USART_SendByte+1,w,c
   483  000902  A4D8               	btfss	status,2,c
   484  000904  D008               	goto	u320
   485  000906  0636               	decf	USART_SendString@attempts,f,c
   486  000908  A0D8               	btfss	status,0,c
   487  00090A  0637               	decf	USART_SendString@attempts+1,f,c
   488  00090C  2836               	incf	USART_SendString@attempts,w,c
   489  00090E  E1F4               	bnz	l1136
   490  000910  2837               	incf	USART_SendString@attempts+1,w,c
   491  000912  A4D8               	btfss	status,2,c
   492  000914  D7F1               	goto	u300
   493  000916                     u320:
   494                           
   495                           ;USART.c: 60:     for(i=0;i<size;i++){
   496  000916  0E00               	movlw	0
   497  000918  6E35               	movwf	USART_SendString@i+1,c
   498  00091A  0E00               	movlw	0
   499  00091C  6E34               	movwf	USART_SendString@i,c
   500  00091E  D01E               	goto	l1152
   501  000920                     l1142:
   502                           
   503                           ;USART.c: 61:         if(!USART_SendByte(*(str + i))){
   504  000920  5034               	movf	USART_SendString@i,w,c
   505  000922  242E               	addwf	USART_SendString@str,w,c
   506  000924  6E32               	movwf	??_USART_SendString& (0+255),c
   507  000926  5035               	movf	USART_SendString@i+1,w,c
   508  000928  202F               	addwfc	USART_SendString@str+1,w,c
   509  00092A  6E33               	movwf	(??_USART_SendString+1)& (0+255),c
   510  00092C  C032  FFF6         	movff	??_USART_SendString,tblptrl
   511  000930  C033  FFF7         	movff	??_USART_SendString+1,tblptrh
   512  000934                     	if	0	;tblptru may be non-zero
   513  000934                     	endif
   514  000934                     	if	0	;tblptru may be non-zero
   515  000934                     	endif
   516  000934  0008               	tblrd		*
   517  000936  50F5               	movf	tablat,w,c
   518  000938  EC80  F005         	call	_USART_SendByte
   519  00093C  502B               	movf	?_USART_SendByte,w,c
   520  00093E  102C               	iorwf	?_USART_SendByte+1,w,c
   521  000940  A4D8               	btfss	status,2,c
   522  000942  D006               	goto	l1146
   523                           
   524                           ;USART.c: 62:             attempts --;
   525  000944  0636               	decf	USART_SendString@attempts,f,c
   526  000946  A0D8               	btfss	status,0,c
   527  000948  0637               	decf	USART_SendString@attempts+1,f,c
   528                           
   529                           ;USART.c: 63:             i --;
   530  00094A  0634               	decf	USART_SendString@i,f,c
   531  00094C  A0D8               	btfss	status,0,c
   532  00094E  0635               	decf	USART_SendString@i+1,f,c
   533  000950                     l1146:
   534                           
   535                           ;USART.c: 65:         if(!attempts)
   536  000950  5036               	movf	USART_SendString@attempts,w,c
   537  000952  1037               	iorwf	USART_SendString@attempts+1,w,c
   538  000954  B4D8               	btfsc	status,2,c
   539  000956  0012               	return	
   540                           
   541                           ;USART.c: 67:     }
   542  000958  4A34               	infsnz	USART_SendString@i,f,c
   543  00095A  2A35               	incf	USART_SendString@i+1,f,c
   544  00095C                     l1152:
   545  00095C  5030               	movf	USART_SendString@size,w,c
   546  00095E  5C34               	subwf	USART_SendString@i,w,c
   547  000960  5035               	movf	USART_SendString@i+1,w,c
   548  000962  0A80               	xorlw	128
   549  000964  6E32               	movwf	??_USART_SendString& (0+255),c
   550  000966  5031               	movf	USART_SendString@size+1,w,c
   551  000968  0A80               	xorlw	128
   552  00096A  5832               	subwfb	??_USART_SendString& (0+255),w,c
   553  00096C  B0D8               	btfsc	status,0,c
   554  00096E  0012               	return	
   555  000970  D7D7               	goto	l1142
   556  000972                     __end_of_USART_SendString:
   557                           	opt callstack 0
   558                           
   559 ;; *************** function _USART_SendByte *****************
   560 ;; Defined at:
   561 ;;		line 47 in file "USART.c"
   562 ;; Parameters:    Size  Location     Type
   563 ;;  byte            1    wreg     unsigned char 
   564 ;; Auto vars:     Size  Location     Type
   565 ;;  byte            1    9[COMRAM] unsigned char 
   566 ;; Return value:  Size  Location     Type
   567 ;;                  2    7[COMRAM] int 
   568 ;; Registers used:
   569 ;;		wreg, status,2
   570 ;; Tracked objects:
   571 ;;		On entry : 0/0
   572 ;;		On exit  : 0/0
   573 ;;		Unchanged: 0/0
   574 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   575 ;;      Params:         2       0       0       0       0       0       0       0       0
   576 ;;      Locals:         1       0       0       0       0       0       0       0       0
   577 ;;      Temps:          0       0       0       0       0       0       0       0       0
   578 ;;      Totals:         3       0       0       0       0       0       0       0       0
   579 ;;Total ram usage:        3 bytes
   580 ;; Hardware stack levels used:    1
   581 ;; Hardware stack levels required when called:    3
   582 ;; This function calls:
   583 ;;		Nothing
   584 ;; This function is called by:
   585 ;;		_USART_SendString
   586 ;; This function uses a non-reentrant model
   587 ;;
   588                           
   589                           	psect	text2
   590  000B00                     __ptext2:
   591                           	opt callstack 0
   592  000B00                     _USART_SendByte:
   593                           	opt callstack 26
   594                           
   595                           ;incstack = 0
   596                           ;USART_SendByte@byte stored from wreg
   597  000B00  6E2D               	movwf	USART_SendByte@byte,c
   598                           
   599                           ;USART.c: 48:     if(!PIE1bits.TXIE){
   600  000B02  B89D               	btfsc	3997,4,c	;volatile
   601  000B04  D008               	goto	l1076
   602                           
   603                           ;USART.c: 49:         tx_byte = byte;
   604  000B06  C02D  F023         	movff	USART_SendByte@byte,_tx_byte	;volatile
   605                           
   606                           ;USART.c: 50:         PIE1bits.TXIE = 1;
   607  000B0A  889D               	bsf	3997,4,c	;volatile
   608                           
   609                           ;USART.c: 51:         return 1;
   610  000B0C  0E00               	movlw	0
   611  000B0E  6E2C               	movwf	?_USART_SendByte+1,c
   612  000B10  0E01               	movlw	1
   613  000B12  6E2B               	movwf	?_USART_SendByte,c
   614  000B14  0012               	return	
   615  000B16                     l1076:
   616                           
   617                           ;USART.c: 53:     return 0;
   618  000B16  0E00               	movlw	0
   619  000B18  6E2C               	movwf	?_USART_SendByte+1,c
   620  000B1A  0E00               	movlw	0
   621  000B1C  6E2B               	movwf	?_USART_SendByte,c
   622  000B1E  0012               	return		;funcret
   623  000B20                     __end_of_USART_SendByte:
   624                           	opt callstack 0
   625                           
   626 ;; *************** function _USART_ReceiveString *****************
   627 ;; Defined at:
   628 ;;		line 84 in file "USART.c"
   629 ;; Parameters:    Size  Location     Type
   630 ;;  buffer          2   11[COMRAM] PTR unsigned char 
   631 ;;		 -> main@okrec(7), 
   632 ;;  size            2   13[COMRAM] int 
   633 ;; Auto vars:     Size  Location     Type
   634 ;;  i               2   16[COMRAM] int 
   635 ;; Return value:  Size  Location     Type
   636 ;;                  2   11[COMRAM] int 
   637 ;; Registers used:
   638 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
   639 ;; Tracked objects:
   640 ;;		On entry : 0/0
   641 ;;		On exit  : 0/0
   642 ;;		Unchanged: 0/0
   643 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   644 ;;      Params:         4       0       0       0       0       0       0       0       0
   645 ;;      Locals:         2       0       0       0       0       0       0       0       0
   646 ;;      Temps:          1       0       0       0       0       0       0       0       0
   647 ;;      Totals:         7       0       0       0       0       0       0       0       0
   648 ;;Total ram usage:        7 bytes
   649 ;; Hardware stack levels used:    1
   650 ;; Hardware stack levels required when called:    4
   651 ;; This function calls:
   652 ;;		_USART_ReceiveByte
   653 ;; This function is called by:
   654 ;;		_main
   655 ;; This function uses a non-reentrant model
   656 ;;
   657                           
   658                           	psect	text3
   659  0009D0                     __ptext3:
   660                           	opt callstack 0
   661  0009D0                     _USART_ReceiveString:
   662                           	opt callstack 26
   663                           
   664                           ;USART.c: 85:     if(rx_counter < size){
   665                           
   666                           ;incstack = 0
   667  0009D0  5031               	movf	USART_ReceiveString@size,w,c
   668  0009D2  5C21               	subwf	_rx_counter,w,c
   669  0009D4  5022               	movf	_rx_counter+1,w,c
   670  0009D6  0A80               	xorlw	128
   671  0009D8  6E33               	movwf	??_USART_ReceiveString& (0+255),c
   672  0009DA  5032               	movf	USART_ReceiveString@size+1,w,c
   673  0009DC  0A80               	xorlw	128
   674  0009DE  5833               	subwfb	??_USART_ReceiveString& (0+255),w,c
   675  0009E0  B0D8               	btfsc	status,0,c
   676  0009E2  D003               	goto	l1118
   677                           
   678                           ;USART.c: 86:         return -1;
   679  0009E4  682F               	setf	?_USART_ReceiveString,c
   680  0009E6  6830               	setf	?_USART_ReceiveString+1,c
   681  0009E8  0012               	return	
   682  0009EA                     l1118:
   683                           
   684                           ;USART.c: 88:     for(int i=0;i<size;i++){
   685  0009EA  0E00               	movlw	0
   686  0009EC  6E35               	movwf	USART_ReceiveString@i+1,c
   687  0009EE  0E00               	movlw	0
   688  0009F0  6E34               	movwf	USART_ReceiveString@i,c
   689  0009F2  D00D               	goto	l1124
   690  0009F4                     l1120:
   691                           
   692                           ;USART.c: 89:         buffer[i] = USART_ReceiveByte();
   693  0009F4  ECB9  F004         	call	_USART_ReceiveByte	;wreg free
   694  0009F8  6E33               	movwf	??_USART_ReceiveString& (0+255),c
   695  0009FA  5034               	movf	USART_ReceiveString@i,w,c
   696  0009FC  242F               	addwf	USART_ReceiveString@buffer,w,c
   697  0009FE  6ED9               	movwf	fsr2l,c
   698  000A00  5035               	movf	USART_ReceiveString@i+1,w,c
   699  000A02  2030               	addwfc	USART_ReceiveString@buffer+1,w,c
   700  000A04  6EDA               	movwf	fsr2h,c
   701  000A06  C033  FFDF         	movff	??_USART_ReceiveString,indf2
   702                           
   703                           ;USART.c: 90:     }
   704  000A0A  4A34               	infsnz	USART_ReceiveString@i,f,c
   705  000A0C  2A35               	incf	USART_ReceiveString@i+1,f,c
   706  000A0E                     l1124:
   707  000A0E  5031               	movf	USART_ReceiveString@size,w,c
   708  000A10  5C34               	subwf	USART_ReceiveString@i,w,c
   709  000A12  5035               	movf	USART_ReceiveString@i+1,w,c
   710  000A14  0A80               	xorlw	128
   711  000A16  6E33               	movwf	??_USART_ReceiveString& (0+255),c
   712  000A18  5032               	movf	USART_ReceiveString@size+1,w,c
   713  000A1A  0A80               	xorlw	128
   714  000A1C  5833               	subwfb	??_USART_ReceiveString& (0+255),w,c
   715  000A1E  A0D8               	btfss	status,0,c
   716  000A20  D7E9               	goto	l1120
   717                           
   718                           ;USART.c: 91:     return 1;
   719  000A22  0E00               	movlw	0
   720  000A24  6E30               	movwf	?_USART_ReceiveString+1,c
   721  000A26  0E01               	movlw	1
   722  000A28  6E2F               	movwf	?_USART_ReceiveString,c
   723  000A2A  0012               	return		;funcret
   724  000A2C                     __end_of_USART_ReceiveString:
   725                           	opt callstack 0
   726                           
   727 ;; *************** function _USART_ReceiveByte *****************
   728 ;; Defined at:
   729 ;;		line 71 in file "USART.c"
   730 ;; Parameters:    Size  Location     Type
   731 ;;		None
   732 ;; Auto vars:     Size  Location     Type
   733 ;;  i               2    9[COMRAM] int 
   734 ;;  temp_char       1    8[COMRAM] unsigned char 
   735 ;; Return value:  Size  Location     Type
   736 ;;                  1    wreg      unsigned char 
   737 ;; Registers used:
   738 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
   739 ;; Tracked objects:
   740 ;;		On entry : 0/0
   741 ;;		On exit  : 0/0
   742 ;;		Unchanged: 0/0
   743 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   744 ;;      Params:         0       0       0       0       0       0       0       0       0
   745 ;;      Locals:         3       0       0       0       0       0       0       0       0
   746 ;;      Temps:          1       0       0       0       0       0       0       0       0
   747 ;;      Totals:         4       0       0       0       0       0       0       0       0
   748 ;;Total ram usage:        4 bytes
   749 ;; Hardware stack levels used:    1
   750 ;; Hardware stack levels required when called:    3
   751 ;; This function calls:
   752 ;;		Nothing
   753 ;; This function is called by:
   754 ;;		_USART_ReceiveString
   755 ;; This function uses a non-reentrant model
   756 ;;
   757                           
   758                           	psect	text4
   759  000972                     __ptext4:
   760                           	opt callstack 0
   761  000972                     _USART_ReceiveByte:
   762                           	opt callstack 26
   763                           
   764                           ;USART.c: 72:     if(rx_counter > 0){
   765                           
   766                           ;incstack = 0
   767  000972  BE22               	btfsc	_rx_counter+1,7,c
   768  000974  D02B               	goto	l872
   769  000976  5022               	movf	_rx_counter+1,w,c
   770  000978  E103               	bnz	u20
   771  00097A  0421               	decf	_rx_counter,w,c
   772  00097C  A0D8               	btfss	status,0,c
   773  00097E  D026               	goto	l872
   774  000980                     u20:
   775                           
   776                           ;USART.c: 73:         rx_counter --;
   777  000980  0621               	decf	_rx_counter,f,c
   778  000982  A0D8               	btfss	status,0,c
   779  000984  0622               	decf	_rx_counter+1,f,c
   780                           
   781                           ;USART.c: 74:         char temp_char = rx_buffer[0];
   782  000986  C001  F02C         	movff	_rx_buffer,USART_ReceiveByte@temp_char
   783                           
   784                           ;USART.c: 75:         for(int i =0;i<rx_counter;i++){
   785  00098A  0E00               	movlw	0
   786  00098C  6E2E               	movwf	USART_ReceiveByte@i+1,c
   787  00098E  0E00               	movlw	0
   788  000990  6E2D               	movwf	USART_ReceiveByte@i,c
   789  000992  D010               	goto	l866
   790  000994                     l862:
   791                           
   792                           ;USART.c: 76:             rx_buffer[i] = rx_buffer[i+1];
   793  000994  0E02               	movlw	low (_rx_buffer+1)
   794  000996  242D               	addwf	USART_ReceiveByte@i,w,c
   795  000998  6ED9               	movwf	fsr2l,c
   796  00099A  0E00               	movlw	high (_rx_buffer+1)
   797  00099C  202E               	addwfc	USART_ReceiveByte@i+1,w,c
   798  00099E  6EDA               	movwf	fsr2h,c
   799  0009A0  0E01               	movlw	low _rx_buffer
   800  0009A2  242D               	addwf	USART_ReceiveByte@i,w,c
   801  0009A4  6EE1               	movwf	fsr1l,c
   802  0009A6  0E00               	movlw	high _rx_buffer
   803  0009A8  202E               	addwfc	USART_ReceiveByte@i+1,w,c
   804  0009AA  6EE2               	movwf	fsr1h,c
   805  0009AC  CFDF FFE7          	movff	indf2,indf1
   806                           
   807                           ;USART.c: 77:         }
   808  0009B0  4A2D               	infsnz	USART_ReceiveByte@i,f,c
   809  0009B2  2A2E               	incf	USART_ReceiveByte@i+1,f,c
   810  0009B4                     l866:
   811  0009B4  5021               	movf	_rx_counter,w,c
   812  0009B6  5C2D               	subwf	USART_ReceiveByte@i,w,c
   813  0009B8  502E               	movf	USART_ReceiveByte@i+1,w,c
   814  0009BA  0A80               	xorlw	128
   815  0009BC  6E2B               	movwf	??_USART_ReceiveByte& (0+255),c
   816  0009BE  5022               	movf	_rx_counter+1,w,c
   817  0009C0  0A80               	xorlw	128
   818  0009C2  582B               	subwfb	??_USART_ReceiveByte& (0+255),w,c
   819  0009C4  A0D8               	btfss	status,0,c
   820  0009C6  D7E6               	goto	l862
   821                           
   822                           ;USART.c: 78:         return temp_char;
   823  0009C8  502C               	movf	USART_ReceiveByte@temp_char,w,c
   824  0009CA  0012               	return	
   825  0009CC                     l872:
   826                           
   827                           ;USART.c: 80:     return 0;
   828  0009CC  0E00               	movlw	0
   829  0009CE  0012               	return		;funcret
   830  0009D0                     __end_of_USART_ReceiveByte:
   831                           	opt callstack 0
   832                           
   833 ;; *************** function _USART_Init *****************
   834 ;; Defined at:
   835 ;;		line 5 in file "USART.c"
   836 ;; Parameters:    Size  Location     Type
   837 ;;  baud_rate       2   10[COMRAM] int 
   838 ;; Auto vars:     Size  Location     Type
   839 ;;		None
   840 ;; Return value:  Size  Location     Type
   841 ;;                  1    wreg      void 
   842 ;; Registers used:
   843 ;;		wreg, status,2, status,0, cstack
   844 ;; Tracked objects:
   845 ;;		On entry : 0/0
   846 ;;		On exit  : 0/0
   847 ;;		Unchanged: 0/0
   848 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   849 ;;      Params:         2       0       0       0       0       0       0       0       0
   850 ;;      Locals:         0       0       0       0       0       0       0       0       0
   851 ;;      Temps:          0       0       0       0       0       0       0       0       0
   852 ;;      Totals:         2       0       0       0       0       0       0       0       0
   853 ;;Total ram usage:        2 bytes
   854 ;; Hardware stack levels used:    1
   855 ;; Hardware stack levels required when called:    4
   856 ;; This function calls:
   857 ;;		_Initialize_Baud_Rate
   858 ;; This function is called by:
   859 ;;		_main
   860 ;; This function uses a non-reentrant model
   861 ;;
   862                           
   863                           	psect	text5
   864  000AA8                     __ptext5:
   865                           	opt callstack 0
   866  000AA8                     _USART_Init:
   867                           	opt callstack 26
   868                           
   869                           ;USART.c: 7:     TRISCbits.RC6 = 1;
   870                           
   871                           ;incstack = 0
   872  000AA8  8C94               	bsf	3988,6,c	;volatile
   873                           
   874                           ;USART.c: 8:     TRISCbits.RC7 = 1;
   875  000AAA  8E94               	bsf	3988,7,c	;volatile
   876                           
   877                           ;USART.c: 9:     ANSELCbits.ANSC6 = 0;
   878  000AAC  010F               	movlb	15	; () banked
   879  000AAE  9D5D               	bcf	93,6,b	;volatile
   880                           
   881                           ;USART.c: 10:     ANSELCbits.ANSC7 = 0;
   882  000AB0  9F5D               	bcf	93,7,b	;volatile
   883                           
   884                           ; BSR set to: 15
   885                           ;USART.c: 12:     rx_counter = 0;
   886  000AB2  0E00               	movlw	0
   887  000AB4  6E22               	movwf	_rx_counter+1,c
   888  000AB6  0E00               	movlw	0
   889  000AB8  6E21               	movwf	_rx_counter,c
   890                           
   891                           ; BSR set to: 15
   892                           ;USART.c: 14:     PMD0bits.UARTMD = 0;
   893  000ABA  9C7E               	bcf	3966,6,c	;volatile
   894                           
   895                           ;USART.c: 15:     TXSTA1 = 0x24;
   896  000ABC  0E24               	movlw	36
   897  000ABE  6EAC               	movwf	4012,c	;volatile
   898                           
   899                           ; BSR set to: 15
   900                           ;USART.c: 16:     Initialize_Baud_Rate(baud_rate);
   901  000AC0  502E               	movf	USART_Init@baud_rate,w,c
   902  000AC2  EC16  F005         	call	_Initialize_Baud_Rate
   903                           
   904                           ;USART.c: 17:     RCSTA1 = 0x90;
   905  000AC6  0E90               	movlw	144
   906  000AC8  6EAB               	movwf	4011,c	;volatile
   907                           
   908                           ;USART.c: 20:     IPR1bits.TXIP = 1;
   909  000ACA  889F               	bsf	3999,4,c	;volatile
   910                           
   911                           ;USART.c: 21:     IPR1bits.RCIP = 1;
   912  000ACC  8A9F               	bsf	3999,5,c	;volatile
   913                           
   914                           ;USART.c: 22:     PIE1bits.RCIE = 1;
   915  000ACE  8A9D               	bsf	3997,5,c	;volatile
   916                           
   917                           ;USART.c: 23:     PIE1bits.TXIE = 0;
   918  000AD0  989D               	bcf	3997,4,c	;volatile
   919  000AD2  0012               	return		;funcret
   920  000AD4                     __end_of_USART_Init:
   921                           	opt callstack 0
   922                           
   923 ;; *************** function _Initialize_Baud_Rate *****************
   924 ;; Defined at:
   925 ;;		line 27 in file "USART.c"
   926 ;; Parameters:    Size  Location     Type
   927 ;;  baud_rate       1    wreg     unsigned char 
   928 ;; Auto vars:     Size  Location     Type
   929 ;;  baud_rate       1    9[COMRAM] unsigned char 
   930 ;; Return value:  Size  Location     Type
   931 ;;                  2   84[None  ] int 
   932 ;; Registers used:
   933 ;;		wreg, status,2, status,0
   934 ;; Tracked objects:
   935 ;;		On entry : 0/0
   936 ;;		On exit  : 0/0
   937 ;;		Unchanged: 0/0
   938 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   939 ;;      Params:         0       0       0       0       0       0       0       0       0
   940 ;;      Locals:         1       0       0       0       0       0       0       0       0
   941 ;;      Temps:          2       0       0       0       0       0       0       0       0
   942 ;;      Totals:         3       0       0       0       0       0       0       0       0
   943 ;;Total ram usage:        3 bytes
   944 ;; Hardware stack levels used:    1
   945 ;; Hardware stack levels required when called:    3
   946 ;; This function calls:
   947 ;;		Nothing
   948 ;; This function is called by:
   949 ;;		_USART_Init
   950 ;; This function uses a non-reentrant model
   951 ;;
   952                           
   953                           	psect	text6
   954  000A2C                     __ptext6:
   955                           	opt callstack 0
   956  000A2C                     _Initialize_Baud_Rate:
   957                           	opt callstack 26
   958                           
   959                           ;incstack = 0
   960                           ;Initialize_Baud_Rate@baud_rate stored from wreg
   961  000A2C  6E2D               	movwf	Initialize_Baud_Rate@baud_rate,c
   962                           
   963                           ;USART.c: 29:     BAUDCON1 = 0x00;
   964  000A2E  0E00               	movlw	0
   965  000A30  6EB8               	movwf	4024,c	;volatile
   966                           
   967                           ;USART.c: 31:     switch(baud_rate){
   968  000A32  D009               	goto	l834
   969  000A34                     l826:
   970                           
   971                           ;USART.c: 33:             SPBRG1 = 155;
   972  000A34  0E9B               	movlw	155
   973  000A36  6EAF               	movwf	4015,c	;volatile
   974                           
   975                           ;USART.c: 34:             break;
   976  000A38  0012               	return	
   977  000A3A                     l828:
   978                           
   979                           ;USART.c: 36:             SPBRG1 = 51;
   980  000A3A  0E33               	movlw	51
   981  000A3C  6EAF               	movwf	4015,c	;volatile
   982                           
   983                           ;USART.c: 37:             break;
   984  000A3E  0012               	return	
   985  000A40                     l830:
   986                           
   987                           ;USART.c: 39:             SPBRG1 = 25;
   988  000A40  0E19               	movlw	25
   989  000A42  6EAF               	movwf	4015,c	;volatile
   990                           
   991                           ;USART.c: 40:             break;
   992  000A44  0012               	return	
   993  000A46                     l834:
   994  000A46  502D               	movf	Initialize_Baud_Rate@baud_rate,w,c
   995  000A48  6E2B               	movwf	??_Initialize_Baud_Rate& (0+255),c
   996  000A4A  6A2C               	clrf	(??_Initialize_Baud_Rate+1)& (0+255),c
   997                           
   998                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
   999                           ; Switch size 1, requested type "simple"
  1000                           ; Number of cases is 1, Range of values is 0 to 0
  1001                           ; switch strategies available:
  1002                           ; Name         Instructions Cycles
  1003                           ; simple_byte            4     3 (average)
  1004                           ;	Chosen strategy is simple_byte
  1005  000A4C  502C               	movf	??_Initialize_Baud_Rate+1,w,c
  1006  000A4E  0A00               	xorlw	0	; case 0
  1007  000A50  A4D8               	btfss	status,2,c
  1008  000A52  0012               	return	
  1009                           
  1010                           ; Switch size 1, requested type "simple"
  1011                           ; Number of cases is 3, Range of values is 1 to 3
  1012                           ; switch strategies available:
  1013                           ; Name         Instructions Cycles
  1014                           ; simple_byte           10     6 (average)
  1015                           ;	Chosen strategy is simple_byte
  1016  000A54  502B               	movf	??_Initialize_Baud_Rate,w,c
  1017  000A56  0A01               	xorlw	1	; case 1
  1018  000A58  B4D8               	btfsc	status,2,c
  1019  000A5A  D7EC               	goto	l826
  1020  000A5C  0A03               	xorlw	3	; case 2
  1021  000A5E  B4D8               	btfsc	status,2,c
  1022  000A60  D7EC               	goto	l828
  1023  000A62  0A01               	xorlw	1	; case 3
  1024  000A64  A4D8               	btfss	status,2,c
  1025  000A66  0012               	return	
  1026  000A68  D7EB               	goto	l830
  1027  000A6A                     __end_of_Initialize_Baud_Rate:
  1028                           	opt callstack 0
  1029                           
  1030 ;; *************** function _high_isr *****************
  1031 ;; Defined at:
  1032 ;;		line 17 in file "main.c"
  1033 ;; Parameters:    Size  Location     Type
  1034 ;;		None
  1035 ;; Auto vars:     Size  Location     Type
  1036 ;;		None
  1037 ;; Return value:  Size  Location     Type
  1038 ;;                  1    wreg      void 
  1039 ;; Registers used:
  1040 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1041 ;; Tracked objects:
  1042 ;;		On entry : 0/0
  1043 ;;		On exit  : 0/0
  1044 ;;		Unchanged: 0/0
  1045 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1046 ;;      Params:         0       0       0       0       0       0       0       0       0
  1047 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1048 ;;      Temps:          2       0       0       0       0       0       0       0       0
  1049 ;;      Totals:         2       0       0       0       0       0       0       0       0
  1050 ;;Total ram usage:        2 bytes
  1051 ;; Hardware stack levels used:    1
  1052 ;; Hardware stack levels required when called:    2
  1053 ;; This function calls:
  1054 ;;		i2_USART_Init
  1055 ;; This function is called by:
  1056 ;;		Interrupt level 2
  1057 ;; This function uses a non-reentrant model
  1058 ;;
  1059                           
  1060                           	psect	intcode
  1061  000008                     __pintcode:
  1062                           	opt callstack 0
  1063  000008                     _high_isr:
  1064                           	opt callstack 26
  1065                           
  1066                           ;incstack = 0
  1067  000008  8241               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  1068  00000A  CFD9 F029          	movff	fsr2l,??_high_isr
  1069  00000E  CFDA F02A          	movff	fsr2h,??_high_isr+1
  1070                           
  1071                           ;main.c: 19:     if(PIE1bits.TXIE && PIR1bits.TXIF && TXSTA1bits.TRMT){
  1072  000012  B89D               	btfsc	3997,4,c	;volatile
  1073  000014  A89E               	btfss	3998,4,c	;volatile
  1074  000016  D005               	goto	i2l51
  1075  000018  A2AC               	btfss	4012,1,c	;volatile
  1076  00001A  D003               	goto	i2l51
  1077                           
  1078                           ;main.c: 20:         TXREG1 = tx_byte;
  1079  00001C  C023  FFAD         	movff	_tx_byte,4013	;volatile
  1080                           
  1081                           ;main.c: 21:         PIE1bits.TXIE = 0;
  1082  000020  989D               	bcf	3997,4,c	;volatile
  1083  000022                     i2l51:
  1084                           
  1085                           ;main.c: 24:     if(PIR1bits.RCIF){
  1086  000022  AA9E               	btfss	3998,5,c	;volatile
  1087  000024  D01C               	goto	i2l57
  1088                           
  1089                           ;main.c: 25:         if(!RCSTA1bits.FERR){
  1090  000026  B4AB               	btfsc	4011,2,c	;volatile
  1091  000028  D018               	goto	i2l53
  1092                           
  1093                           ;main.c: 26:             if(RCSTA1bits.OERR)
  1094  00002A  B2AB               	btfsc	4011,1,c	;volatile
  1095                           
  1096                           ;main.c: 27:                 RCSTA1bits.OERR = 0;
  1097  00002C  92AB               	bcf	4011,1,c	;volatile
  1098                           
  1099                           ;main.c: 28:             rx_buffer[rx_counter] = RCREG1;
  1100  00002E  0E01               	movlw	low _rx_buffer
  1101  000030  2421               	addwf	_rx_counter,w,c
  1102  000032  6ED9               	movwf	fsr2l,c
  1103  000034  0E00               	movlw	high _rx_buffer
  1104  000036  2022               	addwfc	_rx_counter+1,w,c
  1105  000038  6EDA               	movwf	fsr2h,c
  1106  00003A  CFAE FFDF          	movff	4014,indf2	;volatile
  1107                           
  1108                           ;main.c: 29:             rx_counter ++;
  1109  00003E  4A21               	infsnz	_rx_counter,f,c
  1110  000040  2A22               	incf	_rx_counter+1,f,c
  1111                           
  1112                           ;main.c: 30:             if(rx_counter == (32 +1)){
  1113  000042  0E21               	movlw	33
  1114  000044  1821               	xorwf	_rx_counter,w,c
  1115  000046  1022               	iorwf	_rx_counter+1,w,c
  1116  000048  A4D8               	btfss	status,2,c
  1117  00004A  D009               	goto	i2l57
  1118  00004C                     i2u42_40:
  1119                           
  1120                           ;main.c: 32:                 USART_Init(3);
  1121  00004C  0E00               	movlw	0
  1122  00004E  6E28               	movwf	i2USART_Init@baud_rate+1,c
  1123  000050  0E03               	movlw	3
  1124  000052  6E27               	movwf	i2USART_Init@baud_rate,c
  1125  000054  EC6A  F005         	call	i2_USART_Init	;wreg free
  1126  000058  D002               	goto	i2l57
  1127  00005A                     i2l53:
  1128                           
  1129                           ;main.c: 35:             RCSTA1bits.SPEN = 0;
  1130  00005A  9EAB               	bcf	4011,7,c	;volatile
  1131  00005C  D7F7               	goto	i2u42_40
  1132  00005E                     i2l57:
  1133  00005E  C02A  FFDA         	movff	??_high_isr+1,fsr2h
  1134  000062  C029  FFD9         	movff	??_high_isr,fsr2l
  1135  000066  9241               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  1136  000068  0011               	retfie		f
  1137  00006A                     __end_of_high_isr:
  1138                           	opt callstack 0
  1139                           
  1140 ;; *************** function i2_USART_Init *****************
  1141 ;; Defined at:
  1142 ;;		line 5 in file "USART.c"
  1143 ;; Parameters:    Size  Location     Type
  1144 ;;  baud_rate       2    3[COMRAM] int 
  1145 ;; Auto vars:     Size  Location     Type
  1146 ;;		None
  1147 ;; Return value:  Size  Location     Type
  1148 ;;                  1    wreg      void 
  1149 ;; Registers used:
  1150 ;;		wreg, status,2, status,0, cstack
  1151 ;; Tracked objects:
  1152 ;;		On entry : 0/0
  1153 ;;		On exit  : 0/0
  1154 ;;		Unchanged: 0/0
  1155 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1156 ;;      Params:         2       0       0       0       0       0       0       0       0
  1157 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1158 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1159 ;;      Totals:         2       0       0       0       0       0       0       0       0
  1160 ;;Total ram usage:        2 bytes
  1161 ;; Hardware stack levels used:    1
  1162 ;; Hardware stack levels required when called:    1
  1163 ;; This function calls:
  1164 ;;		i2_Initialize_Baud_Rate
  1165 ;; This function is called by:
  1166 ;;		_high_isr
  1167 ;; This function uses a non-reentrant model
  1168 ;;
  1169                           
  1170                           	psect	text8
  1171  000AD4                     __ptext8:
  1172                           	opt callstack 0
  1173  000AD4                     i2_USART_Init:
  1174                           	opt callstack 26
  1175                           
  1176                           ;USART.c: 7:     TRISCbits.RC6 = 1;
  1177                           
  1178                           ;incstack = 0
  1179  000AD4  8C94               	bsf	3988,6,c	;volatile
  1180                           
  1181                           ;USART.c: 8:     TRISCbits.RC7 = 1;
  1182  000AD6  8E94               	bsf	3988,7,c	;volatile
  1183                           
  1184                           ;USART.c: 9:     ANSELCbits.ANSC6 = 0;
  1185  000AD8  010F               	movlb	15	; () banked
  1186  000ADA  9D5D               	bcf	93,6,b	;volatile
  1187                           
  1188                           ;USART.c: 10:     ANSELCbits.ANSC7 = 0;
  1189  000ADC  9F5D               	bcf	93,7,b	;volatile
  1190                           
  1191                           ; BSR set to: 15
  1192                           ;USART.c: 12:     rx_counter = 0;
  1193  000ADE  0E00               	movlw	0
  1194  000AE0  6E22               	movwf	_rx_counter+1,c
  1195  000AE2  0E00               	movlw	0
  1196  000AE4  6E21               	movwf	_rx_counter,c
  1197                           
  1198                           ; BSR set to: 15
  1199                           ;USART.c: 14:     PMD0bits.UARTMD = 0;
  1200  000AE6  9C7E               	bcf	3966,6,c	;volatile
  1201                           
  1202                           ;USART.c: 15:     TXSTA1 = 0x24;
  1203  000AE8  0E24               	movlw	36
  1204  000AEA  6EAC               	movwf	4012,c	;volatile
  1205                           
  1206                           ; BSR set to: 15
  1207                           ;USART.c: 16:     Initialize_Baud_Rate(baud_rate);
  1208  000AEC  5027               	movf	i2USART_Init@baud_rate,w,c
  1209  000AEE  EC35  F005         	call	i2_Initialize_Baud_Rate
  1210                           
  1211                           ;USART.c: 17:     RCSTA1 = 0x90;
  1212  000AF2  0E90               	movlw	144
  1213  000AF4  6EAB               	movwf	4011,c	;volatile
  1214                           
  1215                           ;USART.c: 20:     IPR1bits.TXIP = 1;
  1216  000AF6  889F               	bsf	3999,4,c	;volatile
  1217                           
  1218                           ;USART.c: 21:     IPR1bits.RCIP = 1;
  1219  000AF8  8A9F               	bsf	3999,5,c	;volatile
  1220                           
  1221                           ;USART.c: 22:     PIE1bits.RCIE = 1;
  1222  000AFA  8A9D               	bsf	3997,5,c	;volatile
  1223                           
  1224                           ;USART.c: 23:     PIE1bits.TXIE = 0;
  1225  000AFC  989D               	bcf	3997,4,c	;volatile
  1226  000AFE  0012               	return		;funcret
  1227  000B00                     __end_ofi2_USART_Init:
  1228                           	opt callstack 0
  1229                           
  1230 ;; *************** function i2_Initialize_Baud_Rate *****************
  1231 ;; Defined at:
  1232 ;;		line 27 in file "USART.c"
  1233 ;; Parameters:    Size  Location     Type
  1234 ;;  baud_rate       1    wreg     unsigned char 
  1235 ;; Auto vars:     Size  Location     Type
  1236 ;;  baud_rate       1    2[COMRAM] unsigned char 
  1237 ;; Return value:  Size  Location     Type
  1238 ;;                  2    0[None  ] int 
  1239 ;; Registers used:
  1240 ;;		wreg, status,2, status,0
  1241 ;; Tracked objects:
  1242 ;;		On entry : 0/0
  1243 ;;		On exit  : 0/0
  1244 ;;		Unchanged: 0/0
  1245 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1246 ;;      Params:         0       0       0       0       0       0       0       0       0
  1247 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1248 ;;      Temps:          2       0       0       0       0       0       0       0       0
  1249 ;;      Totals:         3       0       0       0       0       0       0       0       0
  1250 ;;Total ram usage:        3 bytes
  1251 ;; Hardware stack levels used:    1
  1252 ;; This function calls:
  1253 ;;		Nothing
  1254 ;; This function is called by:
  1255 ;;		i2_USART_Init
  1256 ;; This function uses a non-reentrant model
  1257 ;;
  1258                           
  1259                           	psect	text9
  1260  000A6A                     __ptext9:
  1261                           	opt callstack 0
  1262  000A6A                     i2_Initialize_Baud_Rate:
  1263                           	opt callstack 26
  1264                           
  1265                           ;incstack = 0
  1266                           ;i2Initialize_Baud_Rate@baud_rate stored from wreg
  1267  000A6A  6E26               	movwf	i2Initialize_Baud_Rate@baud_rate,c
  1268                           
  1269                           ;USART.c: 29:     BAUDCON1 = 0x00;
  1270  000A6C  0E00               	movlw	0
  1271  000A6E  6EB8               	movwf	4024,c	;volatile
  1272                           
  1273                           ;USART.c: 31:     switch(baud_rate){
  1274  000A70  D009               	goto	i2l1090
  1275  000A72                     i2l1082:
  1276                           
  1277                           ;USART.c: 33:             SPBRG1 = 155;
  1278  000A72  0E9B               	movlw	155
  1279  000A74  6EAF               	movwf	4015,c	;volatile
  1280                           
  1281                           ;USART.c: 34:             break;
  1282  000A76  0012               	return	
  1283  000A78                     i2l1084:
  1284                           
  1285                           ;USART.c: 36:             SPBRG1 = 51;
  1286  000A78  0E33               	movlw	51
  1287  000A7A  6EAF               	movwf	4015,c	;volatile
  1288                           
  1289                           ;USART.c: 37:             break;
  1290  000A7C  0012               	return	
  1291  000A7E                     i2l1086:
  1292                           
  1293                           ;USART.c: 39:             SPBRG1 = 25;
  1294  000A7E  0E19               	movlw	25
  1295  000A80  6EAF               	movwf	4015,c	;volatile
  1296                           
  1297                           ;USART.c: 40:             break;
  1298  000A82  0012               	return	
  1299  000A84                     i2l1090:
  1300  000A84  5026               	movf	i2Initialize_Baud_Rate@baud_rate,w,c
  1301  000A86  6E24               	movwf	??i2_Initialize_Baud_Rate& (0+255),c
  1302  000A88  6A25               	clrf	(??i2_Initialize_Baud_Rate+1)& (0+255),c
  1303                           
  1304                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1305                           ; Switch size 1, requested type "simple"
  1306                           ; Number of cases is 1, Range of values is 0 to 0
  1307                           ; switch strategies available:
  1308                           ; Name         Instructions Cycles
  1309                           ; simple_byte            4     3 (average)
  1310                           ;	Chosen strategy is simple_byte
  1311  000A8A  5025               	movf	??i2_Initialize_Baud_Rate+1,w,c
  1312  000A8C  0A00               	xorlw	0	; case 0
  1313  000A8E  A4D8               	btfss	status,2,c
  1314  000A90  0012               	return	
  1315                           
  1316                           ; Switch size 1, requested type "simple"
  1317                           ; Number of cases is 3, Range of values is 1 to 3
  1318                           ; switch strategies available:
  1319                           ; Name         Instructions Cycles
  1320                           ; simple_byte           10     6 (average)
  1321                           ;	Chosen strategy is simple_byte
  1322  000A92  5024               	movf	??i2_Initialize_Baud_Rate,w,c
  1323  000A94  0A01               	xorlw	1	; case 1
  1324  000A96  B4D8               	btfsc	status,2,c
  1325  000A98  D7EC               	goto	i2l1082
  1326  000A9A  0A03               	xorlw	3	; case 2
  1327  000A9C  B4D8               	btfsc	status,2,c
  1328  000A9E  D7EC               	goto	i2l1084
  1329  000AA0  0A01               	xorlw	1	; case 3
  1330  000AA2  A4D8               	btfss	status,2,c
  1331  000AA4  0012               	return	
  1332  000AA6  D7EB               	goto	i2l1086
  1333  000AA8                     __end_ofi2_Initialize_Baud_Rate:
  1334                           	opt callstack 0
  1335                           
  1336                           	psect	rparam
  1337  0000                     
  1338                           	psect	temp
  1339  000041                     btemp:
  1340                           	opt callstack 0
  1341  000041                     	ds	1
  1342  0000                     int$flags	set	btemp
  1343  0000                     wtemp8	set	btemp+1
  1344  0000                     ttemp5	set	btemp+1
  1345  0000                     ttemp6	set	btemp+4
  1346  0000                     ttemp7	set	btemp+8
  1347                           tosu	equ	0xFFF
  1348                           tosh	equ	0xFFE
  1349                           tosl	equ	0xFFD
  1350                           stkptr	equ	0xFFC
  1351                           pclatu	equ	0xFFB
  1352                           pclath	equ	0xFFA
  1353                           pcl	equ	0xFF9
  1354                           tblptru	equ	0xFF8
  1355                           tblptrh	equ	0xFF7
  1356                           tblptrl	equ	0xFF6
  1357                           tablat	equ	0xFF5
  1358                           prodh	equ	0xFF4
  1359                           prodl	equ	0xFF3
  1360                           indf0	equ	0xFEF
  1361                           postinc0	equ	0xFEE
  1362                           postdec0	equ	0xFED
  1363                           preinc0	equ	0xFEC
  1364                           plusw0	equ	0xFEB
  1365                           fsr0h	equ	0xFEA
  1366                           fsr0l	equ	0xFE9
  1367                           wreg	equ	0xFE8
  1368                           indf1	equ	0xFE7
  1369                           postinc1	equ	0xFE6
  1370                           postdec1	equ	0xFE5
  1371                           preinc1	equ	0xFE4
  1372                           plusw1	equ	0xFE3
  1373                           fsr1h	equ	0xFE2
  1374                           fsr1l	equ	0xFE1
  1375                           bsr	equ	0xFE0
  1376                           indf2	equ	0xFDF
  1377                           postinc2	equ	0xFDE
  1378                           postdec2	equ	0xFDD
  1379                           preinc2	equ	0xFDC
  1380                           plusw2	equ	0xFDB
  1381                           fsr2h	equ	0xFDA
  1382                           fsr2l	equ	0xFD9
  1383                           status	equ	0xFD8


Data Sizes:
    Strings     13
    Constant    0
    Data        0
    BSS         35
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     29      64
    BANK0           160      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    USART_ReceiveString@buffer	PTR unsigned char  size(2) Largest target is 7
		 -> main@okrec(COMRAM[7]), 

    USART_SendString@str	PTR unsigned char  size(2) Largest target is 9
		 -> STR_3(CODE[9]), 


Critical Paths under _main in COMRAM

    _main->_USART_SendString
    _USART_SendString->_USART_SendByte
    _USART_ReceiveString->_USART_ReceiveByte
    _USART_Init->_Initialize_Baud_Rate

Critical Paths under _high_isr in COMRAM

    _high_isr->i2_USART_Init
    i2_USART_Init->i2_Initialize_Baud_Rate

Critical Paths under _main in BANK0

    None.

Critical Paths under _high_isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _high_isr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _high_isr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _high_isr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _high_isr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _high_isr in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _high_isr in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _high_isr in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 9     9      0     939
                                             20 COMRAM     9     9      0
                         _USART_Init
                _USART_ReceiveString
                   _USART_SendString
 ---------------------------------------------------------------------------------
 (1) _USART_SendString                                    10     6      4     333
                                             10 COMRAM    10     6      4
                     _USART_SendByte
 ---------------------------------------------------------------------------------
 (2) _USART_SendByte                                       3     1      2      22
                                              7 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (1) _USART_ReceiveString                                  7     3      4     324
                                             11 COMRAM     7     3      4
                  _USART_ReceiveByte
 ---------------------------------------------------------------------------------
 (2) _USART_ReceiveByte                                    4     4      0      60
                                              7 COMRAM     4     4      0
 ---------------------------------------------------------------------------------
 (1) _USART_Init                                           2     0      2     213
                                             10 COMRAM     2     0      2
               _Initialize_Baud_Rate
 ---------------------------------------------------------------------------------
 (2) _Initialize_Baud_Rate                                 3     3      0      15
                                              7 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (3) _high_isr                                             2     2      0      96
                                              5 COMRAM     2     2      0
                       i2_USART_Init
 ---------------------------------------------------------------------------------
 (4) i2_USART_Init                                         2     0      2      96
                                              3 COMRAM     2     0      2
             i2_Initialize_Baud_Rate
 ---------------------------------------------------------------------------------
 (5) i2_Initialize_Baud_Rate                               3     3      0      22
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _USART_Init
     _Initialize_Baud_Rate
   _USART_ReceiveString
     _USART_ReceiveByte
   _USART_SendString
     _USART_SendByte

 _high_isr (ROOT)
   i2_USART_Init
     i2_Initialize_Baud_Rate

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0       0      21        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK3           100      0       0      11        0.0%
BANK3              100      0       0      12        0.0%
BITBANK2           100      0       0       9        0.0%
BANK2              100      0       0      10        0.0%
BITBANK1           100      0       0       7        0.0%
BANK1              100      0       0       8        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0       0       5        0.0%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     1D      40       1       68.1%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      40       6        0.0%
DATA                 0      0      40       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.05 build -831301201 
Symbol Table                                                                                   Wed Mar 06 21:09:49 2019

                             l62 081C           __end_of_USART_SendByte 0B20  
                             u20 0980                     __CFG_CP0$OFF 000000  
                   __CFG_CP1$OFF 000000                     __CFG_CP2$OFF 000000  
                   __CFG_CP3$OFF 000000                              l830 0A40  
                            l826 0A34                              l834 0A46  
                            l828 0A3A                              l862 0994  
                            l872 09CC                              l866 09B4  
                   __CFG_CPB$OFF 000000                              u300 08F8  
                            u320 0916                              u450 0826  
                   __CFG_CPD$OFF 000000                              u507 086A  
                            u460 0894                              u497 0850  
  __size_of_Initialize_Baud_Rate 003E                              wreg 000FE8  
                     _TXSTA1bits 000FAC               USART_ReceiveByte@i 002D  
                   __CFG_LVP$OFF 000000                             l1120 09F4  
                           l1124 0A0E                             l1132 08DA  
                           l1118 09EA                             l1142 0920  
                           l1222 0876                             l1214 0842  
                           l1152 095C                             l1136 08F8  
                           l1146 0950                             l1076 0B16  
                           STR_1 080C                             STR_2 080A  
                           STR_3 0801                             _LATA 000F89  
                           i2l51 0022                             i2l53 005A  
                           i2l57 005E                    __CFG_FCMEN$ON 000000  
                           _main 0810                             fsr2h 000FDA  
                           indf1 000FE7                             indf2 000FDF  
                           fsr1l 000FE1                             fsr2l 000FD9  
                           btemp 0041         __end_of_USART_SendString 0972  
                  __CFG_BORV$285 000000                             start 006A  
                  __CFG_IESO$OFF 000000                    __CFG_MCLRE$ON 000000  
                   ___param_bank 000000                  ?_USART_SendByte 002B  
                          ?_main 0024           i2_Initialize_Baud_Rate 0A6A  
                          _TRISA 000F92                    __CFG_WRT0$OFF 000000  
                  __CFG_WRT1$OFF 000000                    __CFG_WRT2$OFF 000000  
                  __CFG_WRT3$OFF 000000                   __CFG_EBTR0$OFF 000000  
                 __CFG_EBTR1$OFF 000000                   __CFG_EBTR2$OFF 000000  
                 __CFG_EBTR3$OFF 000000                    __CFG_WRTB$OFF 000000  
                  __CFG_WRTC$OFF 000000                    __CFG_WRTD$OFF 000000  
                 __CFG_EBTRB$OFF 000000                            tablat 000FF5  
                          ttemp5 0042                            ttemp6 0045  
                          ttemp7 0049                            status 000FD8  
                 __CFG_T3CMX$RC0 000000                            wtemp8 0042  
                 __CFG_ICPRT$OFF 000000                      ?_USART_Init 002E  
                __initialization 0B20                     __end_of_main 08D2  
             USART_SendByte@byte 002D                   __CFG_PCLKEN$ON 000000  
                         ??_main 0038                    __activetblptr 000002  
                 __CFG_SDOMX$RB3 000000     __size_of_USART_ReceiveString 005C  
           USART_ReceiveString@i 0034                  __CFG_CCP2MX$RC1 000000  
                         _ANSELA 000F5B                           i2l1082 0A72  
                         i2l1090 0A84                           i2l1084 0A78  
                         i2l1086 0A7E                   __CFG_WDTEN$OFF 000000  
                         _RCREG1 000FAE                           _RCSTA1 000FAB  
                         _OSCCON 000FD3                           _SPBRG1 000FAF  
                 __CFG_WDTPS$256 000000                           _TXREG1 000FAD  
                         _TXSTA1 000FAC                   __CFG_XINST$OFF 000000  
               __end_of_high_isr 006A                   __CFG_STVREN$ON 000000  
                         clear_0 0B26                     __mediumconst 0000  
                         tblptrh 000FF7                           tblptrl 000FF6  
                         tblptru 000FF8              __size_of_USART_Init 002C  
           __CFG_LS48MHZ$SYS48X8 000000                       __accesstop 0060  
        __end_of__initialization 0B2C                  __CFG_PBADEN$OFF 000000  
                  ___rparam_used 000001                   __pcstackCOMRAM 0024  
               __CFG_nPWRTEN$OFF 000000            i2USART_Init@baud_rate 0027  
   __end_of_Initialize_Baud_Rate 0A6A                ?_USART_SendString 002E  
  Initialize_Baud_Rate@baud_rate 002D  i2Initialize_Baud_Rate@baud_rate 0026  
                  ?i2_USART_Init 0027          USART_ReceiveString@size 0031  
               ??_USART_SendByte 002D               ??_USART_SendString 0032  
              __CFG_PLLSEL$PLL3X 000000          ?i2_Initialize_Baud_Rate 0024  
                        _OSCCON2 000FD2                          i2u42_40 004C  
                        _OSCTUNE 000F9B                        ?_high_isr 0024  
               __CFG_CFGPLLEN$ON 000000                   ??i2_USART_Init 0029  
                   ??_USART_Init 0030                          __Hparam 0000  
                        __Lparam 0000              _USART_ReceiveString 09D0  
 __end_ofi2_Initialize_Baud_Rate 0AA8         USART_SendString@attempts 0036  
                   __psmallconst 0800                          __pcinit 0B20  
                        __ramtop 0800                          __ptext0 0810  
                        __ptext1 08D2                          __ptext2 0B00  
                        __ptext3 09D0                          __ptext4 0972  
                        __ptext5 0AA8                          __ptext6 0A2C  
                        __ptext8 0AD4                          __ptext9 0A6A  
            USART_SendString@str 002E             ?_USART_ReceiveString 002F  
             __end_of_USART_Init 0AD4                          _tx_byte 0023  
                     ??_high_isr 0029             end_of_initialization 0B2C  
                  __Lmediumconst 0000                          postinc0 000FEE  
          ??_USART_ReceiveString 0033             _Initialize_Baud_Rate 0A2C  
                      _TRISCbits 000F94                       _rx_counter 0021  
            USART_Init@baud_rate 002E            ?_Initialize_Baud_Rate 0024  
            start_initialization 0B20             __end_ofi2_USART_Init 0B00  
                __CFG_nLPBOR$OFF 000000       USART_ReceiveByte@temp_char 002C  
              _USART_ReceiveByte 0972                USART_SendString@i 0034  
             ?_USART_ReceiveByte 0024              ??_USART_ReceiveByte 002B  
      __size_of_USART_SendString 00A0                      __pbssCOMRAM 0001  
              __size_of_high_isr 0062        __end_of_USART_ReceiveByte 09D0  
                      __pintcode 0008           ??_Initialize_Baud_Rate 002B  
                    __smallconst 0800                         _BAUDCON1 000FB8  
                       _IPR1bits 000F9F                         _PIE1bits 000F9D  
                       _PMD0bits 000F7E                         _PIR1bits 000F9E  
                       _RCONbits 000FD0            __size_ofi2_USART_Init 002C  
                      _rx_buffer 0001          __size_of_USART_SendByte 0020  
                      main@okrec 003A       __size_of_USART_ReceiveByte 005E  
                       __Hrparam 0000                     i2_USART_Init 0AD4  
                       __Lrparam 0000               __CFG_BOREN$SBORDIS 000000  
    __end_of_USART_ReceiveString 0A2C                 _USART_SendString 08D2  
                     _ANSELCbits 000F5D             USART_SendString@size 0030  
                       _high_isr 0008                      _OSCCON2bits 000FD2  
                  __size_of_main 00C2         ??i2_Initialize_Baud_Rate 0024  
                       int$flags 0041                       _INTCONbits 000FF2  
      USART_ReceiveString@buffer 002F                         intlevel2 0000  
                     _RCSTA1bits 000FAB                       _OSCCONbits 000FD3  
           __CFG_CPUDIV$NOCLKDIV 000000                   _USART_SendByte 0B00  
             __CFG_FOSC$INTOSCIO 000000  __size_ofi2_Initialize_Baud_Rate 003E  
                     _USART_Init 0AA8  
